{"version":3,"sources":["assets/images/images.js","assets/images sync /^/.//.*$","assets/images/beth.png","assets/images/birdman.png","assets/images/evilmorty.png","assets/images/gianthead.png","assets/images/goldenfold.png","assets/images/jerry.png","assets/images/jessica.png","assets/images/jumbotronBG.jpg","assets/images/jumbrotronBG2.jpg","assets/images/morty.png","assets/images/mrmeseeks.png","assets/images/mrpbh.png","assets/images/rick.png","assets/images/summer.png","components/AnswerDisplay/AnswerDisplay.jsx","components/Header/Header.jsx","components/Cards/Cards.jsx","components/Jumbrotron/Jumbotron.jsx","components/Footer/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["images","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","AnswerDisplay","this","props","middleCard","state","gameStarted","stillGuessing","score","topScore","React","Component","Header","className","href","Card","onClick","handlePicClick","src","require","imgFileName","alt","Jumbotron","sort","Math","random","link","index","key","Footer","App","guessedImages","event","filter","image","target","tempGuessedArray","push","setState","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6GAAA,OAEeA,UAFA,CAAC,WAAD,2J,wKCAf,IAAIC,EAAM,CACT,aAAc,GACd,gBAAiB,GACjB,kBAAmB,GACnB,kBAAmB,GACnB,mBAAoB,GACpB,WAAY,EACZ,cAAe,EACf,cAAe,GACf,gBAAiB,GACjB,oBAAqB,GACrB,sBAAuB,GACvB,cAAe,GACf,kBAAmB,GACnB,cAAe,GACf,aAAc,GACd,eAAgB,IAIjB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,I,gBCrCpBU,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,qICoB5BC,G,mMAfX,OAAIC,KAAKC,MAAMC,WACLF,KAAKC,MAAME,MAAMC,YAGvB,4BACGJ,KAAKC,MAAME,MAAME,cACd,sBACA,yCAA0C,KALhD,wDASG,sCAAYL,KAAKC,MAAME,MAAMG,MAA7B,eAAgDN,KAAKC,MAAME,MAAMI,c,GAbhDC,IAAMC,YCgBnBC,EAhBA,SAAC,GAAa,IAAZP,EAAW,EAAXA,MACf,OACE,yBAAKQ,UAAU,wCACb,yBAAKA,UAAU,qEACb,uBAAGxB,GAAG,YAAYyB,KAAK,KAAI,6CAE7B,yBAAKD,UAAU,uEACb,kBAAC,EAAD,CAAeT,YAAY,EAAMC,MAAOA,KAE1C,yBAAKQ,UAAU,sEACb,kBAAC,EAAD,CAAeR,MAAOA,O,eCDfU,G,MATF,SAACZ,GACV,OACI,yBAAKU,UAAU,sBACf,yBAAKG,QAASb,EAAMc,eAAgBJ,UAAU,oBAAoBK,IAAKC,MAAQ,YAAuBhB,EAAMiB,cAAgBC,IAAKlB,EAAMiB,iBCmBhIE,EApBG,SAACnB,GAEf,OADAlB,UAAOsC,MAAK,kBAAIC,KAAKC,SAAS,MAE1B,yBAAKZ,UAAU,oBAEX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,gEACX,0GAEH,yBAAKA,UAAU,OACf5B,UAAOC,KAAI,SAACwC,EAAKC,GACd,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAOV,eAAgBd,EAAMc,eAAgBG,YAAaM,WCJjFG,G,MATA,WACX,OACI,yBAAKhB,UAAU,sBACX,wBAAIA,UAAU,SAAd,qBCmCGiB,E,2MAnCbzB,MAAS,CACPG,MAAO,EACPC,SAAU,EACVH,aAAa,EACbC,eAAe,EACfwB,cAAe,I,EAGjBd,eAAiB,SAACe,GAChB,EAAK3B,MAAM0B,cAAcE,QAAO,SAACC,GAC/B,OAAOA,IAAUF,EAAMG,OAAOd,OAEhC,IAAMe,EAAmB,EAAK/B,MAAM0B,cACpCK,EAAiBC,KAAKL,EAAMG,OAAOd,KACnC,EAAKiB,SAAS,CACZP,cAAcK,IACd,WACAG,QAAQC,IAAI,EAAKnC,W,wEAQnB,OACE,6BACE,kBAAC,EAAD,CAAQA,MAAOH,KAAKG,QACpB,kBAAC,EAAD,CAAWY,eAAgBf,KAAKe,iBAChC,kBAAC,EAAD,W,GA9BUP,IAAMC,WCOJ8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.538a652d.chunk.js","sourcesContent":["const images = [`beth.png`, `birdman.png`, `evilmorty.png`, `gianthead.png`,`goldenfold.png`,`jerry.png`,`jessica.png`,`morty.png`,`mrmeseeks.png`,`mrpbh.png`,`rick.png`,`summer.png`]\n\nexport default images;","var map = {\n\t\"./beth.png\": 21,\n\t\"./birdman.png\": 22,\n\t\"./evilmorty.png\": 23,\n\t\"./gianthead.png\": 24,\n\t\"./goldenfold.png\": 25,\n\t\"./images\": 1,\n\t\"./images.js\": 1,\n\t\"./jerry.png\": 26,\n\t\"./jessica.png\": 27,\n\t\"./jumbotronBG.jpg\": 28,\n\t\"./jumbrotronBG2.jpg\": 29,\n\t\"./morty.png\": 30,\n\t\"./mrmeseeks.png\": 31,\n\t\"./mrpbh.png\": 32,\n\t\"./rick.png\": 33,\n\t\"./summer.png\": 34\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 20;","module.exports = __webpack_public_path__ + \"static/media/beth.4d5e65a0.png\";","module.exports = __webpack_public_path__ + \"static/media/birdman.612ba8d4.png\";","module.exports = __webpack_public_path__ + \"static/media/evilmorty.0657e1f4.png\";","module.exports = __webpack_public_path__ + \"static/media/gianthead.978b3847.png\";","module.exports = __webpack_public_path__ + \"static/media/goldenfold.3774b39d.png\";","module.exports = __webpack_public_path__ + \"static/media/jerry.af8e8a84.png\";","module.exports = __webpack_public_path__ + \"static/media/jessica.a9644830.png\";","module.exports = __webpack_public_path__ + \"static/media/jumbotronBG.cf6e28fe.jpg\";","module.exports = __webpack_public_path__ + \"static/media/jumbrotronBG2.d5520025.jpg\";","module.exports = __webpack_public_path__ + \"static/media/morty.244deeda.png\";","module.exports = __webpack_public_path__ + \"static/media/mrmeseeks.9667b7ee.png\";","module.exports = __webpack_public_path__ + \"static/media/mrpbh.d61b2d5b.png\";","module.exports = __webpack_public_path__ + \"static/media/rick.06b65841.png\";","module.exports = __webpack_public_path__ + \"static/media/summer.afdbb7bf.png\";","import React from \"react\";\nimport \"./AnswerDisplay.css\";\n\nclass AnswerDisplay extends React.Component {\n  render() {\n    if (this.props.middleCard) {\n      return !this.props.state.gameStarted ? (\n        <h2>Click a picture to start</h2>\n      ) : (\n        <h2>\n          {this.props.state.stillGuessing\n            ? \"Correct Click Again\"\n            : \"Incorrect Start a new game by Clicking\"}{\" \"}\n        </h2>\n      );\n    }\n    return <h2>Score: {this.props.state.score}|Top Score: {this.props.state.topScore}</h2>;\n  }\n}\n\nexport default AnswerDisplay;\n","import React from \"react\";\nimport \"./Header.css\";\nimport AnswerDisplay from \"../AnswerDisplay/AnswerDisplay\";\nconst Header = ({state}) => {\n  return (\n    <div className=\"row sticky-top topHeader text-center\">\n      <div className=\"col-4 leftHeader d-flex justify-content-center align-items-center\">\n        <a id=\"reloadBtn\" href=\"/\"><h2>Clicky Game</h2></a>\n      </div>\n      <div className=\"col-4 middleHeader d-flex justify-content-center align-items-center\">\n        <AnswerDisplay middleCard={true} state={state}/>\n      </div>\n      <div className=\"col-4 rightHeader d-flex justify-content-center align-items-center\">\n        <AnswerDisplay state={state}/>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport './Cards.css';\n\nconst Card = (props)=>{\n    return (\n        <div className=\"col-3 imgSize my-2\">\n        <img onClick={props.handlePicClick} className=\"img-fluid rounded\" src={require(`../../assets/images/${props.imgFileName}`)} alt={props.imgFileName}/>\n        </div>\n    )\n};\n\n\nexport default Card;\n\n","import React from \"react\";\nimport \"./Jumbotron.css\";\nimport images from \"../../assets/images/images\";\nimport Card from \"../Cards/Cards\"\n\nconst Jumbotron = (props)=>{\n    images.sort(()=>Math.random()-0.5)\n    return (\n        <div className=\"text-center pb-5\" >\n\n            <div className=\"container\">\n                <div className=\"row rowText d-flex justify-content-center align-items-center\">\n                    <h3>Click And Morty! Click any picture to play, dont click the same one twice</h3>\n                 </div>\n                 <div className=\"row\">\n                {images.map((link,index)=>{\n                    return <Card key={index} handlePicClick={props.handlePicClick} imgFileName={link}/>\n                })}\n\n                 </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Jumbotron;","import React from \"react\";\nimport \"./Footer.css\";\n\nconst Footer = ()=>{\n    return (\n        <nav className=\"navbar text-center\">\n            <h3 className=\"w-100\">Powered by ATM</h3>\n        </nav>\n    )\n}\n\n\nexport default Footer;","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header/Header\"\nimport Jumbotron from \"./components/Jumbrotron/Jumbotron\"\nimport Footer from \"./components/Footer/Footer\";\nclass App extends React.Component {\n  state =  {\n    score: 0,\n    topScore: 0,\n    gameStarted: false,\n    stillGuessing: false,\n    guessedImages: []\n  }\n\n  handlePicClick = (event)=>{\n    this.state.guessedImages.filter((image)=>{\n      return image === event.target.alt\n    })\n    const tempGuessedArray = this.state.guessedImages;\n    tempGuessedArray.push(event.target.alt)\n    this.setState({\n      guessedImages:tempGuessedArray\n    },()=>{\n      console.log(this.state)\n    })\n\n    \n  };\n\n\n  render() {\n    return (\n      <div>\n        <Header state={this.state}/>\n        <Jumbotron handlePicClick={this.handlePicClick}/>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}